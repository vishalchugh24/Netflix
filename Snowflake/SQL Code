-- CREATE DATABASE
CREATE DATABASE NETFLIX;

-- USE DATABASE
USE NETFLIX;

-- CREATE TABLE MAIN_DATA
CREATE TABLE MAIN_DATA
(ID VARCHAR(50) NULL,
TITLE VARCHAR(200) NULL,
`TYPE` VARCHAR(50) NULL,
RELEASE_YEAR INT NULL,
AGE_CERTIFICATION VARCHAR(100) NULL,
RUNTIME INT NULL,
GENRES VARCHAR(500) NULL,
PRODUCTTION_COUNTRIES VARCHAR(50) NULL,
SEASONS INT NULL,
IMDB_ID VARCHAR(100) NULL,
IMDB_SCORE DECIMAL(38,1) NULL,
IMDB_VOTES INT NULL
);

-- SELECT ALL MAIN_DATA
SELECT * FROM MAIN_DATA;

-- CREATE TABLE APAC
CREATE TABLE APAC
(YEARS INT,
QUARTERS VARCHAR(20),
`DATE` DATE,
QUARTER_REVENUE_USD INT,
SUBSCRIBERS_ADDITION INT,
TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD INT,
AVERAGE_PAYING_MEMBERS INT,
AVERAGE_REVENUE_PER_MEMBERSHIP_USD DECIMAL(38,2),
PERCENT_CHANGE_COMPARED_TO_PREVIOUS_YEAR INT,
CURRENCY_PERCENT_CHANGE_AS_COMPARED_TO_PREVIOUS_YEAR_PERIOD INT 
);



-- SELECT ALL DATA FROM APAC TABLE
SELECT * FROM APAC;

-- CREATE TABLE EMEA
CREATE TABLE EMEA
(YEARS INT,
QUARTERS VARCHAR(20),
`DATE` DATE,
QUARTER_REVENUE_USD INT,
SUBSCRIBERS_ADDITION INT,
TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD INT,
AVERAGE_PAYING_MEMBERS INT,
AVERAGE_REVENUE_PER_MEMBERSHIP_USD DECIMAL(38,2),
PERCENT_CHANGE_COMPARED_TO_PREVIOUS_YEAR INT,
CURRENCY_PERCENT_CHANGE_AS_COMPARED_TO_PREVIOUS_YEAR_PERIOD INT 
);


-- SELECT ALL DATA FROM EMEA TABLE
SELECT * FROM EMEA;

-- CREATE TABLE LATAM
CREATE TABLE LATAM
(YEARS INT,
QUARTERS VARCHAR(20),
`DATE` DATE,
QUARTER_REVENUE_USD INT,
SUBSCRIBERS_ADDITION INT,
TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD INT,
AVERAGE_PAYING_MEMBERS INT,
AVERAGE_REVENUE_PER_MEMBERSHIP_USD DECIMAL(38,2),
PERCENT_CHANGE_COMPARED_TO_PREVIOUS_YEAR INT,
CURRENCY_PERCENT_CHANGE_AS_COMPARED_TO_PREVIOUS_YEAR_PERIOD INT 
);


-- SELECT ALL DATA FROM EMEA TABLE
SELECT * FROM LATAM;

-- CREATE TABLE UCAN
CREATE TABLE UCAN
(YEARS INT,
QUARTERS VARCHAR(20),
`DATE` DATE,
QUARTER_REVENUE_USD INT,
SUBSCRIBERS_ADDITION INT,
TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD INT,
AVERAGE_PAYING_MEMBERS INT,
AVERAGE_REVENUE_PER_MEMBERSHIP_USD DECIMAL(38,2),
PERCENT_CHANGE_COMPARED_TO_PREVIOUS_YEAR INT,
CURRENCY_PERCENT_CHANGE_AS_COMPARED_TO_PREVIOUS_YEAR_PERIOD INT 
);


-- SELECT ALL DATA FROM EMEA TABLE
SELECT * FROM UCAN;

-- CREATE AN ADDITIONAL COLUMNS IN EACH SUBSCRIBERS SHEET
ALTER TABLE APAC ADD COLUMN REGION VARCHAR;
ALTER TABLE EMEA ADD COLUMN REGION VARCHAR;
ALTER TABLE LATAM ADD COLUMN REGION VARCHAR;
ALTER TABLE UCAN ADD COLUMN REGION VARCHAR;


--UPDATE THE REGION COLUMN IN EACH SHEET
UPDATE APAC SET REGION = 'APAC';
UPDATE EMEA SET REGION = 'EMEA';
UPDATE LATAM SET REGION = 'LATAM';
UPDATE UCAN SET REGION = 'UCAN';


-- CREATE TABLE NAMED REVENUE_EXPENDITURE
CREATE TABLE REVENUE_EXPENDITURE
( YEARS INT,
  QUARTER VARCHAR(20),
  `DATE` DATE,
   REVENUE INT,
   COST_OF_REVENUE INT,
   MARKETING_EXPEDITURE INT,
   TECHNOLOGY_AND_DEVELOPMENT_COST INT,
   GENERAL_AND_ADMINISTRATIVE_EXPENSES INT,
   NET_INCOME_AFTER_TAXES INT
);

SELECT * FROM REVENUE_EXPENDITURE;

-- CONSOLIDATE ALL THE DATA OF REVENUE, EXPENDITURE AND REGION_WISE REVENUE
CREATE OR REPLACE TABLE MASTER_NETFLIX_REVENUE_EXPENDITURE AS
SELECT A.*, B.QUARTER_REVENUE_USD AS APAC_REVENUE,B.SUBSCRIBERS_ADDITION AS APAC_SUBSCRIBERS_ADDITION,B.TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD AS APAC_TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD ,B.AVERAGE_PAYING_MEMBERS AS APAC_AVG_PAYING_MEMBERS,
B.AVERAGE_REVENUE_PER_MEMBERSHIP_USD AS APAC_AVG_REV_PER_MEMBER, 
C.QUARTER_REVENUE_USD AS LATAM_REVENUE, C.SUBSCRIBERS_ADDITION AS LATAM_SUBSCRIBERS_ADDITION,C.TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD AS LATAM_TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD ,C.AVERAGE_PAYING_MEMBERS AS LATAM_AVG_PAYING_MEMBERS,
C.AVERAGE_REVENUE_PER_MEMBERSHIP_USD AS LATAM_AVG_REV_PER_MEMBER,
D.QUARTER_REVENUE_USD AS EMEA_REVENUE, D.SUBSCRIBERS_ADDITION AS EMEA_SUBSCRIBERS_ADDITION,D.TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD AS EMEA_TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD ,D.AVERAGE_PAYING_MEMBERS AS EMEA_AVG_PAYING_MEMBERS,
D.AVERAGE_REVENUE_PER_MEMBERSHIP_USD AS EMEA_AVG_REV_PER_MEMBER,
E.QUARTER_REVENUE_USD AS UCAN_REVENUE, E.SUBSCRIBERS_ADDITION AS UCAN_SUBSCRIBERS_ADDITION,E.TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD AS UCAN_TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD ,E.AVERAGE_PAYING_MEMBERS AS UCAN_AVG_PAYING_MEMBERS,
E.AVERAGE_REVENUE_PER_MEMBERSHIP_USD AS UCAN_AVG_REV_PER_MEMBER
FROM REVENUE_EXPENDITURE AS A
INNER JOIN APAC AS B ON A.`DATE` = B.`DATE`
INNER JOIN LATAM AS C ON B.`DATE` = C.`DATE`
INNER JOIN EMEA AS D ON C.`DATE` = D.`DATE`
INNER JOIN UCAN AS E ON D.`DATE` = E.`DATE`; 


SELECT * FROM MASTER_NETFLIX_REVENUE_EXPENDITURE;

---------EXPLORATORY DATA ANALYSIS---------

-- NOW WE HAVE CONSOLIDATED ALL THE DATA INTO OUT MASTER DATA FOR REVENUE AND EXPENDITURE AND WE HAVE MAIN_DATA FOR CONTENT ON NETFLIX. LETS GET SOME INSIGHTS FROM NETFLIX DATA

-- COUNT OF MOVIES AND SHOWS IN NETFLIX DATA
SELECT `TYPE`, COUNT(`TYPE`) AS COUNT_MOVIE_SHOW
FROM MAIN_DATA
GROUP BY `TYPE`; --> Movies are 2072 and Shows are 1327. Thus, Movies are more compared to Shows from 2018 till 2022

-- What is the highest runtime in shows and movies
SELECT `TYPE`, MAX(RUNTIME) AS MAX_RUNTIME FROM MAIN_DATA
GROUP BY `TYPE`; --> MAX_RUNTIME FOR MOVIES IS 209 MINUTES AND SHOW IS 199 MINUTES

-- HOW MANY SHOWS AND MOVIES ARE THERE WHOSE GENRE IS COMEDY
SELECT `TYPE`, COUNT(GENRES) AS COMEDY FROM MAIN_DATA
WHERE GENRES LIKE '%comedy%'
GROUP BY `TYPE`; --> THERE ARE 799 MOVIE AND 391 SHOW WHICH HAS GENERES AS COMEDY

-- WHICH MOVIE OR SHOW HAS GOT HIGHEST IMDB SCORE
SELECT RELEASE_YEAR ,TITLE, `TYPE`, IMDB_SCORE 
FROM MAIN_DATA
WHERE IMDB_SCORE = (SELECT MAX(IMDB_SCORE) FROM MAIN_DATA);---> HIGHEST IMDB_SCORE IS 9.6 SCORED BY #ABtalks SHOW

-- WHATS THE HIGHEST IMDB SCORE FOR MOVIE
SELECT RELEASE_YEAR, TITLE,`TYPE`,GENRES, IMDB_SCORE FROM MAIN_DATA
WHERE IMDB_SCORE IN 
(SELECT MAX(IMDB_SCORE)
FROM MAIN_DATA
WHERE `TYPE` = 'MOVIE');--> There are 2 movies who have got 9.0 IMDB_SCORE

-- HIGHEST VOTE
SELECT RELEASE_YEAR ,TITLE, `TYPE`, IMDB_VOTES
FROM MAIN_DATA
WHERE IMDB_VOTES IN (SELECT MAX(IMDB_VOTES) FROM MAIN_DATA);--> Dont Look Up movie released in 2021 has got highest votes 498447

-- HIGHEST VOTE FOR SHOWS
SELECT RELEASE_YEAR ,TITLE, `TYPE`, IMDB_VOTES
FROM MAIN_DATA
WHERE IMDB_VOTES IN (SELECT MAX(IMDB_VOTES) FROM MAIN_DATA WHERE `TYPE`= 'SHOW');--> THE WITCHER SHOW HAS GOT HIGHEST VOTES 465949


-- COUNT OF MOVIES AND SHOWS RELEASED YEAR WISE
SELECT RELEASE_YEAR, `TYPE`, COUNT(TITLE) AS NUMBER_OF_RELEASES
FROM MAIN_DATA
GROUP BY 2,1;



-- MASTER NETFLIX_DATA_MOVIES_SHOWS
CREATE TABLE NETFLIX_DATA_MOVIES_SHOWS AS
SELECT RELEASE_YEAR, COUNT(`TYPE`) AS MOVIES_SHOWS_COUNT, AVG(RUNTIME) AS AVG_RUNTIME_MINUTES, MAX(RUNTIME) AS HIGHEST_RUNTIME_MINUTES, MIN(RUNTIME) AS LOWEST_RUNTIME_MINUTES,
AVG(IMDB_SCORE) AS AVG_IMDB_SCORE, MAX(IMDB_SCORE) AS HIGHEST_IMDB_SCORE, MIN(IMDB_SCORE) AS LOWEST_IMDB_SCORE,
AVG(IMDB_VOTES) AS AVG_IMDB_VOTES, MAX(IMDB_VOTES) AS HIGHEST_IMDB_VOTES, MIN(IMDB_VOTES) AS LOWEST_IMDB_VOTES
FROM MAIN_DATA
GROUP BY RELEASE_YEAR
ORDER BY RELEASE_YEAR;

SELECT * FROM NETFLIX_DATA_MOVIES_SHOWS;

-- SUMMARY_REVENUE_EXPENDITURE
CREATE TABLE SUMMARY_REVENUE_EXPENDITURE AS

SELECT YEARS, SUM(REVENUE) AS TOTAL_REVENUE_USD, SUM(COST_OF_REVENUE) AS TOTAL_COST_OF_REVENUE_USD, SUM(MARKETING_EXPEDITURE) AS MARKETING_EXP_USD, 
SUM(TECHNOLOGY_AND_DEVELOPMENT_COST) AS TECH_DEV_COST_USD, SUM(GENERAL_AND_ADMINISTRATIVE_EXPENSES) AS ADMIN_EXP_USD, SUM(NET_INCOME_AFTER_TAXES) AS PROFITS_USD,

SUM(APAC_REVENUE) AS APAC_REVENUE_USD, SUM(APAC_SUBSCRIBERS_ADDITION) AS APAC_SUBSCRIBERS_ADDITION, SUM(APAC_TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD) AS APAC_TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD,
AVG(APAC_AVG_PAYING_MEMBERS) AS APAC_AVG_PAYING_MEMBERS, AVG(APAC_AVG_REV_PER_MEMBER) AS APAC_AVG_REV_PER_MEMBER_USD,

SUM(LATAM_REVENUE) AS LATAM_REVENUE_USD, SUM(LATAM_SUBSCRIBERS_ADDITION) AS LATAM_SUBSCRIBERS_ADDITION, SUM(LATAM_TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD) AS LATAM_TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD,
AVG(LATAM_AVG_PAYING_MEMBERS) AS LATAM_AVG_PAYING_MEMBERS, AVG(LATAM_AVG_REV_PER_MEMBER) AS LATAM_AVG_REV_PER_MEMBER_USD,

SUM(EMEA_REVENUE) AS EMEA_REVENUE_USD, SUM(EMEA_SUBSCRIBERS_ADDITION) AS EMEA_SUBSCRIBERS_ADDITION, SUM(EMEA_TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD) AS EMEA_TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD,
AVG(EMEA_AVG_PAYING_MEMBERS) AS EMEA_AVG_PAYING_MEMBERS, AVG(EMEA_AVG_REV_PER_MEMBER) AS EMEA_AVG_REV_PER_MEMBER_USD,

SUM(UCAN_REVENUE) AS UCAN_REVENUE_USD, SUM(UCAN_SUBSCRIBERS_ADDITION) AS UCAN_SUBSCRIBERS_ADDITION, SUM(UCAN_TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD) AS UCAN_TOTAL_SUBSCRIBERS_AT_END_OF_PERIOD,
AVG(UCAN_AVG_PAYING_MEMBERS) AS UCAN_AVG_PAYING_MEMBERS, AVG(UCAN_AVG_REV_PER_MEMBER) AS UCAN_AVG_REV_PER_MEMBER_USD

FROM MASTER_NETFLIX_REVENUE_EXPENDITURE
GROUP BY YEARS
ORDER BY YEARS;

CREATE TABLE MASTER_NETFLIX AS
SELECT A.*, B.*
FROM NETFLIX_DATA_MOVIES_SHOWS AS A
INNER JOIN SUMMARY_REVENUE_EXPENDITURE AS B
ON A.RELEASE_YEAR = B.YEARS;


SELECT * FROM MASTER_NETFLIX;


ALTER TABLE MASTER_NETFLIX
DROP YEARS;




-- MASTER TABLES LIST
-- MASTER_NETFLIX, MASTER_NETFLIX_REVENUE_EXPENDITURE, SUMMARY_REVENUE_EXPENDITURE, NETFLIX_DATA_MOVIES_SHOWS

-- SPLIT THE TEXT WITH DELIMITER FOR GENRES
CREATE TABLE GENRES_2018_22 AS
SELECT RELEASE_YEAR, C.value::string AS GENRES
FROM MAIN_DATA,
     LATERAL FLATTEN(input=>split(GENRES, ';')) C;
     
-- FIND OUT WHICH GENRES ARE MORE IN RESPECTIVE YEARS
SELECT * FROM (
SELECT RELEASE_YEAR, GENRES, COUNT(*) AS MAX_GENRES, 
ROW_NUMBER() OVER (PARTITION BY RELEASE_YEAR ORDER BY MAX_GENRES DESC) AS ROW_NUM  
FROM GENRES_2018_22 
GROUP BY RELEASE_YEAR, GENRES
ORDER BY RELEASE_YEAR) 
AS GENRES_DATA
WHERE ROW_NUM = 1;

SELECT RELEASE_YEAR, GENRES, COUNT(*) AS COUNT_GENRES
FROM GENRES_2018_22
GROUP BY RELEASE_YEAR, GENRES;


PRODUCTTION_COUNTRIES
     
-- SPLIT THE TEXT WITH DELIMITER FOR PRODUCTTION_COUNTRIES
CREATE TABLE PRODUCTION_COUNTRIES_2018_22 AS
SELECT RELEASE_YEAR, C.value::string AS PRODUCTION_COUNTRIES
FROM MAIN_DATA,
     LATERAL FLATTEN(input=>split(PRODUCTTION_COUNTRIES, ';')) C;

SELECT * FROM PRODUCTION_COUNTRIES_2018_22;

SELECT RELEASE_YEAR, PRODUCTION_COUNTRIES, COUNT(*) AS COUNT_PRODUCTION_COUNTRIES
FROM PRODUCTION_COUNTRIES_2018_22
GROUP BY RELEASE_YEAR, PRODUCTION_COUNTRIES;


-- FIND OUT WHICH PRODUCTION_COUNTRIES ARE MORE IN RESPECTIVE YEARS
SELECT * FROM (
SELECT RELEASE_YEAR, PRODUCTION_COUNTRIES, COUNT(*) AS MAX_PRODUCTION_COUNTRIES, 
ROW_NUMBER() OVER (PARTITION BY RELEASE_YEAR ORDER BY MAX_PRODUCTION_COUNTRIES DESC) AS ROW_NUM  
FROM PRODUCTION_COUNTRIES_2018_22
GROUP BY RELEASE_YEAR, PRODUCTION_COUNTRIES
ORDER BY RELEASE_YEAR) 
AS PRODUCTION_COUNTRIES_DATA
WHERE ROW_NUM = 1;

SELECT * FROM SUMMARY_REVENUE_EXPENDITURE;

CREATE TABLE MASTER_REGION AS
SELECT * FROM APAC
UNION ALL
SELECT * FROM EMEA
UNION ALL 
SELECT * FROM LATAM
UNION ALL
SELECT * FROM UCAN;

SELECT * FROM MASTER_REVENUE_EXPENDITURE;






